name: Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Compress project files (excluding .git)
        run: |
          mkdir -p build
          tar --exclude='.git' -czf build/app.tar.gz .

      - name: Copy project to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ec2_key.pem build/app.tar.gz ${{ secrets.EC2_HOST }}:/home/ec2-user/

      - name: Extract and deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_HOST }} << 'EOF'
            rm -rf /home/ec2-user/app
            mkdir /home/ec2-user/app
            tar -xzf /home/ec2-user/app.tar.gz -C /home/ec2-user/app
            rm /home/ec2-user/app.tar.gz

            cd /home/ec2-user/app

            echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
            echo "PORT=${{ secrets.PORT }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}" >> .env
            echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env
            echo "NODE_ENV=production" >> .env

            docker stop mflix || true
            docker rm mflix || true
            docker build -t mflix-api .
            PORT=$(grep PORT .env | cut -d '=' -f2)
            docker run -d -p $PORT:$PORT --env-file .env --name mflix mflix-api
          EOF
